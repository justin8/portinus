#!/usr/bin/env python3

import docker
import logging
import os
import shutil
import subprocess

from jinja2 import Template

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
SERVICE_DIR = '/usr/local/docker-services'

log = logging.getLogger()
client = docker.from_env()


def _ensure_restart_timer(name, schedule=''):
    if schedule:
        # create
        pass
    else:
        _remove_restart_timer(name)

def _remove_restart_timer(name):
    pass


def _env_file_path(name):
    return os.path.join(SERVICE_DIR, name + '.environment')


def _ensure_env_file(name, env):
    target_env_file_name = _env_file_path(name)
    if env:
        if not (os.path.islink(target_env_file_name) or os.path.isfile(target_env_file_name)):
            log.error(f"Cannot find the specified environment file ({env})")
            raise(IOError)
        shutil.copy(env, target_env_file_name
    else:
        _remove_env_file(name)


def _remove_env_file(name)
    target_env_file_name = _env_file_path(name)
    try:
        os.remove(target_env_file_name)
    except FileNotFoundError:
        pass


def _get_source_dir


def _sync_source(source, name):
    # copy to SERVICE_DIR/name (and remove extraneous files
    # Removing extraneous files might cause issues with compose files that use ./ whatever. Might need to support some kind of whitelist?) - this can be in v2
    pass


def _remove_source(name):
    pass


def _ensure_main_service(name, env):
    # Ensure the service file exists and is correct
    # Use a jinja template
    # Call a daemon-reload
    # Enable service

    pass

def _ensure_monitor_service(name):
    # Ensure the service file exists for monitoring the status of this service.
    # Create a separate python cli tool for this, and call it from a systemd timer?
    pass


def _exists(name):
    return os.path.isdir(os.path.join(SERVICE_DIR, name))


def remove(name):
    if not _exists(name):
        log.error("The specified service does not exist")
        raise(IOError)

    _systemctl(["stop", name])
    _remove_env_file(name)
    _remove_main_service(name)
    _remove_restart_timer(name)
    _remove_source(name)


def ensure(source, name, env=None, restart_schedule=None):

    _ensure_env_file(name, env)
    _sync_source(source, name)
    _ensure_main_service(name, env)
    _ensure_restart_timer(name, restart)
    _ensure_monitor_service(name)
    _systemctl(["restart", name])


if __name__ == "__main__":
    task()
